#% text_encoding = iso8859_1
##
##  Auto-generated by Dialog Designer ( 02.02.2010 )
##
##  System.user_mame = uli.naedelin

_package sw

_pragma(classify_level=restricted)
def_slotted_exemplar(:ghc_dcc_automation_swaf_plugin,
	{},
	:plugin)
$

_pragma(classify_level=restricted)
_method ghc_dcc_automation_swaf_plugin.init_actions()
	##
	##  Auto-generated by Dialog Designer : 02.02.2010
	##
	##  Initialize actions for SELF.
	##
	_self.add_action(
		sw_action.new(
			:activate_dialog,
			:caption,         _self.message(:caption),
			:short_help_text, _self.message(:short_help_text),
			:engine,          _self,
			:image,           {:ghc_dcc_automation_swaf,_self.module_name},
			:action_message,  :|activate_dialog()|
			  ) )
_endmethod
$

_pragma(classify_level=restricted)
_method ghc_dcc_automation_swaf_plugin.build_gui(a_frame,_optional xml_element)
	##
	##  Auto-generated by Dialog Designer : 02.02.2010
	##
	##  Define the GUI layout.
	##
	_local d,a_panel

	d << ghc_dcc_automation_swaf_framework.new(_self.message(:framework_title),_self.framework)

	a_panel << d.build_gui(a_frame,xml_element)
	d.tab_label << _self.message(:tab_title)

	>> a_panel
_endmethod
$

_pragma(classify_level=restricted)
_method ghc_dcc_automation_swaf_plugin.activate_dialog(_gather args)
	##
	##  Auto-generated by Dialog Designer : 02.02.2010
	##
	##  Activate & cache the the 'ghc_dcc_automation_swaf' GUI.
	##
	_local d,name

	name << :ghc_dcc_automation_swaf

	_if (d << _self.get_dialog(name)) _isnt _unset
	_then
#		d.quit()
	_endif

#	_else
#	_if (d << _self.get_dialog(name)) _is _unset
#	_then
	d << ghc_dcc_automation_swaf_framework.new(_self.message(:title),_unset)

	_self.cache_dialog(name,d)
#	_endif

	d.maximizable? << _true
	d.minimizable? << _true
	d.resizable?   << _true

	d.activate(_unset,_self.message(name))

	>> d
_endmethod
$
