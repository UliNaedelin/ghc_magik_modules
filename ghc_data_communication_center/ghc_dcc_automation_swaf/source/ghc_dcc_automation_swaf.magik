#% text_encoding = iso8859_1
##
##  Auto-generated by Dialog Designer ( 02.02.2010 )
##
##  System.user_mame = uli.naedelin

_package sw

_pragma(classify_level=restricted)
def_slotted_exemplar(:ghc_dcc_automation_swaf,
	{
		{:items, _unset, :writable}
	},
	:plugin)
$

_pragma(classify_level=restricted)
_method ghc_dcc_automation_swaf.init_actions()
	##
	##  Auto-generated by Dialog Designer : 02.02.2010
	##
	##  Initialize actions for SELF.
	#
	# Work Area Actions ...
	#
	_self.add_action( sw_action.new( :run_selected_automation,
		:toolbar_control,        :button_item,
		:caption,                _self.message(:run_selected_automation),
		:engine,                 _self,
		:action_message,         :|run_selected_automation()| ) )

	_self.add_action( sw_action.new( :quit,
		:toolbar_control,        :button_item,
		:caption,                _self.message(:quit),
		:engine,                 _self,
		:action_message,         :|quit()| ) )
	#
	# Menubar Actions ...
	#
	_self.add_action( sw_action.new( :about,
		:menubar_control,        :button_item,
		:engine,                 _self,
		:action_message,         :|about()| ) )
_endmethod
$

_pragma(classify_level=restricted)
_method ghc_dcc_automation_swaf.build_gui(a_frame,_optional xml_element)
	##
	##  Auto-generated by Dialog Designer : 02.02.2010
	##
	##  Define the GUI layout.

	.items << property_list.new()

	rowcol_01 << rowcol.new(a_frame,_unset,1,:pixel,
		:resize?,	_true,
		:tab_label,	"DCC Vorkonfigurierte Exporte",
		:bottom_spacing,	6,
		:col_spacing,	7,
		:default_col_alignment,	:fill,
		:default_row_alignment,	:fill,
		:left_spacing,	6,
		:right_spacing,	6,
		:min_row_sizes, {250,00,0},
		:row_resize_values,	{100,0,0},
		:row_spacing,	6,
		:top_spacing,	6)

	# Lister möglicher Exportkonfigurationen
	.items[:auto_config_list] << recordset_gui_component.new(:auto_config_list,_self,
			:auto_redraw?,	True,
			:data_source,gis_program_manager.databases[:ghc_config].collections[:ghc_dcc_auto_config] )

	# GHC Adds
	.items[:auto_config_list].add_event_handler( :records_selected, _self, :record_selected|()|)
	.items[:auto_config_list].add_event_handler( :double_clicked,   _self, :double_click_record|()| )

	.items[:auto_config_list_ti] << .items[:auto_config_list].build_gui(rowcol_01,
			:mode,	:one,
			:grid_lines?,	_true,
		
			:column_allow_groupby?,	_true,
			:message_on_no_data?,	_true,
			:retain_headings?,	_true,
			:model,_self )

	.items[:auto_config_note_text_field] << text_window.new(rowcol_01,_unset,_unset,_unset,

								:col_alignment,	:fill,
			:cols,	30,
			:horizontal_scrollbar?,	_false,
			:row_alignment,	:fill,
			:rows,	2,
			:height, 50,
			:vertical_scrollbar?,	_true )

	rowcol_02 << rowcol.new(rowcol_01,1,2,:pixel,
		:resize?,	_true,
		:tab_label,	"DCC Vorkonfigurierte Exporte",
		:bottom_spacing,	0,
		:col_resize_values,	{100},
		:col_spacing,	7,
		:col_alignment,	:fill,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row_spacing,	6,
		:top_spacing,	0)

	# Führt die gewählte Exportkonfiguration aus
	_self.action(:run_selected_automation).place_control_on(rowcol_02,:dialog,
		:control_type, { :button_item,
			:col,	1,
			:col_alignment,	:right,
			:label,	"Ausführen",
			:min_width,	120,
			:row,	1,
			:row_alignment,	:top,
			:selector,	:|run_selected_automation()| } )

	# Beenden
	_self.action(:quit).place_control_on(rowcol_02,:dialog,
		:control_type, { :button_item,
			:col,	2,
			:col_alignment,	:right,
			:label,	"Beenden",
			:min_width,	120,
			:row,	1,
			:row_alignment,	:top,
			:selector,	:|quit()| } )
	# GHC Adds
	_self.update_all()
	>> rowcol_01
_endmethod
$


_pragma(classify_level=restricted)
_method ghc_dcc_automation_swaf.about(_gather args)
	##
	##  Auto-generated by Dialog Designer : 02.02.2010

	_self.dd_default_method("ghc_dcc_automation_swaf.about()",_scatter args)
_endmethod
$

_pragma(classify_level=restricted)
_method ghc_dcc_automation_swaf.dd_default_method(_gather args)
	##
	##  Auto-generated by Dialog Designer : 02.02.2010
	##
	##  General default method writing CLASS.METHOD and passed ARGS to
	##  the Magik> prompt.

	msg << write_string("Auto-generated : ",args[1],%newline)

	_if args.size > 1
	_then
		msg +<< write_string(%newline,args.size-1," parameter(s) passed:")
 	_endif

	_for i _over 2.upto(args.size)
	_loop
		msg +<< write_string(%newline,"         ",args[i])
	_endloop

	write(%newline,"-"*80,%newline,msg)
_endmethod
$

_pragma(classify_level=restricted)
_method ghc_dcc_automation_swaf.progress_indicator_change(_gather args)
	##
	##  Auto-generated by Dialog Designer : 02.02.2010
	##
	##  Change the progressbar value.  Note that to 'reduce' the value
	##  indicated the progress bar must be reset first.

	v << args[1]

	_if v < .items[:progress_bar_value].default(bignum)
	_then
		.items[:progress_bar_value] << v

		_self.progress_indicator_init(_unset)
	_endif

	_self.changed( :progressbar_change, v )
_endmethod
$

_pragma(classify_level=restricted)
_method ghc_dcc_automation_swaf.progress_indicator_init(_gather args)
	##
	##  Auto-generated by Dialog Designer : 02.02.2010
	##
	##  Reset the progress indicator.  This clears the pane,
	##  ready for the first :progressbar_change notification.
	##
	_self.install_progress_indicator(
                  "progress", _self,
                  :indicator, bar_progress_indicator,
                  :max_count, 100,
                  :interrupt_message, :|interrupt_progressbar()|,
                  :progress_aspect, :progressbar_change,
                  :stop_aspect, :progressbar_end )
_endmethod
$

_pragma(classify_level=restricted)
_method ghc_dcc_automation_swaf.progress_indicator_stop(_gather args)
	##
	##  Auto-generated by Dialog Designer : 02.02.2010
	##
	##  Stop the progressbar indicator.  Used when :indicator is
	##  one of the indeterminate display types ...
	##	:busy_progress_indicator
	##	:simple_busy_progress_indicator

	_self.changed( :progressbar_end )
_endmethod
$

_pragma(classify_level=restricted)
_method ghc_dcc_automation_swaf.quit(_gather args)
	##
	##  Auto-generated by Dialog Designer : 02.02.2010
	##
	##  Close the dialog.
	##
	.framework.close()
_endmethod
$

