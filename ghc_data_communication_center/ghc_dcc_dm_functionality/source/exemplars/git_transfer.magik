#% text_encoding = iso8859_1
_package sw
#
# GIT HydroS Consult GmbH, Freiburg i. Br.
##
## Objektklasse     : git_transfer
##
## Beschreibung     :
##
## Vererbung        :
##
## Slots            :
##
## Autor            : Jan Kiefer
##
## Datum            :

#_block
#	_if  !current_package![:git_transfer] _isnt _unset
#	_then
#		remove_exemplar(:git_transfer,_true)
#	_endif
#_endblock
#$

# Exemplardefinition
def_slotted_exemplar( :git_transfer,
		      {

		      },
		      {:user_ds_record, :ghc_xml_record_mixin, :ghc_message_mixin})
$

_pragma(classify_level=restricted)
git_transfer.define_shared_variable(
	:ghc_message_accessor,
	_unset,
	:public)
$


_method git_transfer.mapping_for_class(cname)
	##
	## Liefert das Mapping für die Datenbakobjektklasse cname oder
	## unset
	##
	_for map _over _self.git_mappings.elements()
	_loop
		_if write_string(map.database_classname).as_symbol() _is cname.as_symbol()
		_then
			_return map
		_endif
	_endloop
	_return  _unset
_endmethod
$

_method git_transfer.xml_field_vec
	##
	_return {
			:name,
			:bemerkung,
			:magnification,
			:translation_x,
			:translation_y,
			:rotation_x,
			:rotation_y,
			:rotation_angle,
			:translation?,
			:transform_order,
			:transform_on

	}
_endmethod
$

#_method git_transfer.xml_do_translate
#	##
#	_return _self.translation?
#_endmethod
#$
#
#_method git_transfer.xml_do_translate << p_value
#	##
#	_self.translation? << p_value
#_endmethod
#$
_method git_transfer.xml_records_vec
	##
	_return {
			:git_mappings,
			:ghc_dcc_meta_datas
	}
_endmethod
$

_method git_transfer.ghc_dcc_meta_datas
	##
	l_res_vec << rope.new_from(_self.source_view.collection(:git_dcc_meta_daten).select(
											    predicate.new(
												    :transfer_id,
												    :eq,
												    _self.id)))
	_return l_res_vec
_endmethod
$

_pragma(classify_level=restricted)
_method git_transfer.mapping_info()
	## 
	## 
	l_res << ""
	_for i_mapping _over _self.git_mappings.fast_elements()
	_loop
		_if _not l_res.empty?
		_then
			l_res +<< newline_char
		_endif
		l_res +<< i_mapping.mapping_info()
	_endloop
	_if l_res.empty?
	_then
		l_res << _self.message(:no_mappings_connected)
	_endif 
	_return l_res
_endmethod
$

_pragma(classify_level=restricted)
_method git_transfer.import_mapping_info(p_field_prop)
	## 
	## 
	l_res << ""

	_for i_mapping _over _self.git_mappings.fast_elements()
	_loop
		_if _not l_res.empty?
		_then
			l_res +<< newline_char
		_endif
		l_res +<< i_mapping.import_mapping_info(p_field_prop)
	_endloop
	_if l_res.empty?
	_then
		l_res << _self.message(:no_mappings_connected)
	_endif 
	_return l_res	
_endmethod
$


_pragma(classify_level=restricted)
_method git_transfer.ghc!message_handler()
	##
	_if (l_ma << _self.ghc_message_accessor) _is _unset
	_then
		_self.ghc_message_accessor << l_ma <<
			message_handler.new( :ghc_dcc_dm_functionality )
	_endif
	_return l_ma
_endmethod
$






