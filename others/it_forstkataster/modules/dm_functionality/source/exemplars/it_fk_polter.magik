#% text_encoding = iso8859_1
_package sw

# ------------------------------------------------------------------------------
# ITS Informationstechnik Service GmbH                 Tel.: (0721) 170 88 60
# Benzstraße 3                                         Fax : (0721) 170 88 610
# 76185 Karlsruhe                                      http://www.its-service.de
# ------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# $Author: ITS-TERMINAL\Luettke $
# $Date: 2006-10-11 19:20:38 +0430 (Mi, 11 Okt 2006) $
# $Rev: 292 $
#-------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# Exemplar : it_fk_polter
#------------------------------------------------------------------------------
_pragma(classify_level=advanced, topic={its,fachschale_forstkataster})
## Exemplardefinition Forst Polter
##
def_slotted_exemplar(:it_fk_polter,
            {
		
	    },

	    {:it_fk_rwo_record,
	     :it_fk_basis_mixin}
)
$

#------------------------------------------------------------------------------
#>> Variable: NUMMER_TRENNER
#------------------------------------------------------------------------------
_pragma(classify_level=advanced, topic={its,fachschale_forstkataster})
## Variable zur Ändernung des Trennzeichens bei der grafischen Ausgabe
##
it_fk_polter.define_shared_variable(
	:nummer_trenner,
	%.,
	:public)
$

#------------------------------------------------------------------------------
#>> Methode: REVIERNUMMER_KORREKT?
#------------------------------------------------------------------------------
_pragma(classify_level=advanced, topic={its,fachschale_forstkataster})
_method it_fk_polter.reviernummer_korrekt?
	
	## Validator - prüft, ob der eingegebene Wert im Feld reviernummer
	## numerisch und 2-stellig ist

	_local val << _self.reviernummer

	_if val.size <> 2 _orif
	    _not val.is_a_number?
	_then
		_return _false, condition.new(:it_fk_field_length_no_validation,
					      :feld, _self.field(:reviernummer).external_name,
					      :stellen, 2)
	_endif
	_return _true 
_endmethod
$

#------------------------------------------------------------------------------
#>> Methode: HOLZLISTENNUMMER_KORREKT?
#------------------------------------------------------------------------------
_pragma(classify_level=advanced, topic={its,fachschale_forstkataster})
_method it_fk_polter.holzlistennummer_korrekt?
	
	## Validator - prüft, ob der eingegebene Wert im Feld holzlistennummer
	## numerisch und 3-stellig ist

	_local val << _self.holzlistennummer

	_if val.size <> 3 _orif
	    _not val.is_a_number?
	_then		
		_return _false, condition.new(:it_fk_field_length_no_validation,
					      :feld, _self.field(:holzlistennummer).external_name,
					      :stellen, 3) 
	_endif
	_return _true 
_endmethod
$

#------------------------------------------------------------------------------
#>> Methode: LOSNUMMER_KORREKT?
#------------------------------------------------------------------------------
_pragma(classify_level=advanced, topic={its,fachschale_forstkataster})
_method it_fk_polter.losnummer_korrekt?
	
	## Validator - prüft, ob der eingegebene Wert im Feld losnummer
	## numerisch und 2-stellig ist
	
	_local val << _self.losnummer

	_if val.size <> 2 _orif
	    _not val.is_a_number?
	_then
		_return _false, condition.new(:it_fk_field_length_no_validation,
					      :feld, _self.field(:losnummer).external_name,
					      :stellen, 2)
	_endif
	_return _true 
_endmethod
$

#------------------------------------------------------------------------------
#>> Methode: POLTERNUMMER_KORREKT?
#------------------------------------------------------------------------------
_pragma(classify_level=advanced, topic={its,fachschale_forstkataster})
_method it_fk_polter.polternummer_korrekt?
	
	## Validator - prüft, ob der eingegebene Wert im Feld polternummer
	## numerisch und 4-stellig ist

	_local val << _self.polternummer
	
	_if val.size <> 4 _orif
	    _not val.is_a_number?
	_then
		_return _false, condition.new(:it_fk_field_length_no_validation,
					      :feld, _self.field(:polternummer).external_name,
					      :stellen, 4)
	_endif
	_return _true 
_endmethod
$

#------------------------------------------------------------------------------
#>> Methode: NUMMER_TEXT
#------------------------------------------------------------------------------
_pragma(classify_level=advanced, topic={its,fachschale_forstkataster})
_method it_fk_polter.nummer_text
	
	## Textmethode - liefert eine Nummernkombination, bestehend aus
	## Reviernummer, Holzlistennummer, Losnummer und Polternummer
	## 

	_local trenner << _self.nummer_trenner.default(%.)
	
	>> write_string(_self.reviernummer,     trenner,
			_self.holzlistennummer, trenner,
			_self.losnummer,        trenner,
			_self.polternummer)
_endmethod
$

#------------------------------------------------------------------------------
#>> Methode: DD!RUN_VALIDATORS()
#------------------------------------------------------------------------------
_pragma(classify_level=advanced, topic={its,fachschale_forstkataster})
_private _method it_fk_polter.dd!run_validators()

	## Anpassung von dd_record_mixin.dd!run_validators(), da eigene
	## Condition eine Warning ist, muss danach explizit abgebrochen
	## werden 
	##
	
	_for v _over _self.descriptor.validators.fast_elements()
	_loop	
		(flag,cond) << _self.perform(v)
		_if _not flag
		_then 	cond.invoke()
			!abort!()
		_endif
	_endloop
_endmethod
$

