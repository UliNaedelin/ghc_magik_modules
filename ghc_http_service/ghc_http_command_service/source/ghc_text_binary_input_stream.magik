#% text_encoding = iso8859_1
_package user

#remex(:ghc_text_binary_input_stream)
#$
def_slotted_exemplar(:ghc_text_binary_input_stream,
{
	{:binary_stream, _unset},
	{:converter, _unset}
},
{})
$

_pragma(classify_level=restricted)
ghc_text_binary_input_stream.define_shared_variable(
	:default_encoding_format,
	:utf8,
	:public)
$

_pragma(classify_level=restricted)
_method ghc_text_binary_input_stream.new(p_binary_stream, _optional p_format)
	## 
	## 
	_return _clone.init(p_binary_stream, p_format)
_endmethod
$

_pragma(classify_level=restricted)
_method ghc_text_binary_input_stream.init(p_binary_stream, p_format)
	## 
	## 
	.binary_stream << p_binary_stream
	_if p_format _is _unset
	_then
		p_format << _self.default_encoding_format
	_endif 
	.converter << text_converter.new(p_format, _true)
	_return _self 
_endmethod
$


_pragma(classify_level=restricted)
_method ghc_text_binary_input_stream.write(_gather p_args)
	## 
	##

	s << .binary_stream
	l_tc << .converter
	_for i_string _over p_args.fast_elements()
	_loop
		l_string << i_string.write_string
		l_tc.set_input(l_string)
		_loop
			_if l_tc.run() _isnt :writing
			_then
				_leave
			_endif
			s.put_vec(l_tc.copy_output())
		_endloop
		s.put_vec(l_tc.copy_output())
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={mss_common})
_method ghc_text_binary_input_stream.put_charvec(p_char_vec, _optional p_start, p_length)
	## 
	##
	_for i_char _over p_char_vec.fast_elements()
	_loop 
		.binary_stream.put(i_char.value)
	_endloop 
	
_endmethod
$


_pragma(classify_level=restricted, topic={mss_common})
_method ghc_text_binary_input_stream.put(p_char)
	## 
	## 
	.binary_stream.put(p_char.value)
_endmethod
$
