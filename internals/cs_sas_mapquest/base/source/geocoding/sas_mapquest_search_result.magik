#% text_encoding = iso8859_1


_package user
$
#-------------------------------------------------------------------------------
#
# The information and design as detailed in this document is the property of
# General Electric Company, and/or their Associates, and must be returned on demand. 
# It is issued on the strict condition that except with our written permission
# it must not be reproduced, copied or communicated in part or in whole to any
# third party, nor be used for any purpose other than that stated in the
# particular enquiry, order or contract with which it is issued. 
# 
# The reservation of copyright in this document extends from each date
# appearing thereon and in respect of the subject matter as it appeared at the
# relevant date.
#
# Copyright 2000-2006 General Electric Company.  All Rights Reserved. This software 
# product may only be used strictly in accordance with the applicable written License Agreement.
#
#------------------------------------------------------------------------------
#
#
#
#------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#

def_slotted_exemplar (:sas_mapquest_search_result,
{
	{:poi_name,         _unset},
	{:key,              _unset},
	{:source_layer_name,_unset},
	{:dt,               _unset},
	{:gefid,            _unset},
	{:distance,         _unset},
	{:sector,           _unset},
	{:world_bound,      _unset}
})
$
_pragma(classify_level=basic, topic={uns}, usage={external,subclass})
sas_mapquest_search_result.define_slot_access(:poi_name,:writable)
$
_pragma(classify_level=basic, topic={uns}, usage={external,subclass})
sas_mapquest_search_result.define_slot_access(:key,:writable)
$
_pragma(classify_level=basic, topic={uns}, usage={external,subclass})
sas_mapquest_search_result.define_slot_access(:source_layer_name,:writable)
$
_pragma(classify_level=basic, topic={uns}, usage={external,subclass})
sas_mapquest_search_result.define_slot_access(:dt,:writable)
$
_pragma(classify_level=basic, topic={uns}, usage={external,subclass})
sas_mapquest_search_result.define_slot_access(:gefid,:writable)
$
_pragma(classify_level=basic, topic={uns}, usage={external,subclass})
sas_mapquest_search_result.define_slot_access(:distance,:writable)
$
_pragma(classify_level=basic, topic={uns}, usage={external,subclass})
sas_mapquest_search_result.define_slot_access(:sector,:readable)
$
_pragma(classify_level=basic, topic={uns}, usage={external,subclass})
sas_mapquest_search_result.define_slot_access(:world_bound,:readable)
$
_pragma(classify_level=basic, topic={uns}, usage={external,subclass})
_method sas_mapquest_search_result.sector << p_sector
        #
        #
	# Parameters     :
	# Returns        :
	# Function       :
	# Methodology    :
	##
	##
	.sector << p_sector
	_dynamic !current_transform!
	.world_bound <<
		!current_transform!.default(transform).convert_bounding_box(_self.goto_bounds)
_endmethod
$
_pragma(classify_level=basic, topic={uns}, usage={external,subclass})
_method sas_mapquest_search_result.write_on(stream)
        #
        #
	# Parameters     :
	# Returns        :
	# Function       :
	# Methodology    :
	##
	##
	stream.write("---------------------------------------------------------",newline_char)
	stream.write(_self.class_name,newline_char)
	stream.write(tab_char,"Name              : ",.poi_name,newline_char)
	stream.write(tab_char,"Key               : ",.key,newline_char)
	stream.write(tab_char,"Source Layer Name : ",.source_layer_name,newline_char)
	stream.write(tab_char,"DT                : ",.dt,newline_char)
	stream.write(tab_char,"GEFID             : ",.gefid,newline_char)
	stream.write(tab_char,"Distance          : ",.distance,newline_char)
	stream.write(tab_char,"Sector            : ",.sector.size,newline_char)
	_for k,e _over .sector.fast_keys_and_elements()
	_loop
		stream.write(tab_char*2,k,tab_char,e.x,",",e.y,newline_char)
	_endloop
_endmethod
$
_pragma(classify_level=basic, topic={uns}, usage={external,subclass})
_method sas_mapquest_search_result.tabbed_string
        #
        #
	# Parameters     :
	# Returns        :
	# Function       :
	# Methodology    :
	##
	##
	>> .poi_name.default("") + tab_char +
		.key.default("") + tab_char +
		.source_layer_name.default("") + tab_char +
		.dt.default("").write_string + tab_char +
		.gefid.default("").write_string + tab_char +
		.distance.default(0.0).as_fixed_string(0,5)
_endmethod
$
_pragma(classify_level=basic, topic={uns}, usage={external,subclass})
_method sas_mapquest_search_result.as_simple_vector()
        #
        #
	# Parameters     :
	# Returns        :
	# Function       :
	# Methodology    :
	##
	##
	>> {.poi_name.default(""),
	    .key.default(""),
	    .source_layer_name.default(""),
	    .dt.default("").write_string,
	    .gefid.default("").write_string,
	    .distance.default(0.0).as_fixed_string(0,5)}
_endmethod
$
_pragma(classify_level=basic, topic={uns}, usage={external,subclass})
_method sas_mapquest_search_result.bounds
        #
        #
	# Parameters     :
	# Returns        :
	# Function       :
	# Methodology    :
	##
	##
	>> .sector.bounds
_endmethod
$
_pragma(classify_level=basic, topic={uns}, usage={external,subclass})
_method sas_mapquest_search_result.goto_bounds
        #
        #
	# Parameters     :
	# Returns        :
	# Function       :
	# Methodology    :
	##
	##
	_local l_bounds << _self.bounds
	_if l_bounds.width = 0 _andif l_bounds.height = 0 _then
		_local l_location << l_bounds.centre
		_return bounding_box.new_centred(l_location.x,l_location.y,0.002)
	_else
		_return l_bounds
	_endif
_endmethod
$
_pragma(classify_level=basic, topic={uns}, usage={external,subclass})
_method sas_mapquest_search_result.new_from_record(p_record)
        #
        #
	# Parameters     :
	# Returns        :
	# Function       :
	# Methodology    :
	##
	##
	_local l_clone << _clone
	l_clone.poi_name          << p_record.poi_name.default("")
	l_clone.key               << p_record.key.default("")
	l_clone.source_layer_name << p_record.source_layer_name.default("")
	l_clone.dt                << p_record.dt.default(0.0)
	l_clone.gefid             << p_record.gefid.default(0.0)
	l_clone.distance          << p_record.distance.default(0.0)
	_if (l_route << p_record.route) _isnt _unset _then
		_dynamic !current_coordinate_system!
		_local l_sector <<
			_if !current_coordinate_system! _isnt _unset _then
				_local l_transform << transform.new_converting_cs_to_cs(
						!current_coordinate_system!,
						coordinate_system.new_proj_long_lat(:wgs84,:degree))
				>> l_route.sectors.deep_copy().transform(l_transform)
			_else
				>> l_route.sectors.deep_copy()
			_endif
		l_clone.sector << l_sector
	_endif
	>> l_clone
_endmethod
$
_pragma(classify_level=basic, topic={uns}, usage={external,subclass})
_method sas_mapquest_search_result.to_record(p_collection)
        #
        #
	# Parameters     :
	# Returns        :
	# Function       :
	# Methodology    :
	##
	##
	_local l_detached_record << p_collection.new_detached_record()
	l_detached_record.number            << p_collection.size + 1
	l_detached_record.poi_name          << .poi_name.default("")
	l_detached_record.key               << .key.default("")
	l_detached_record.source_layer_name << .source_layer_name.default("")
	l_detached_record.dt                << .dt.default(0.0)
	l_detached_record.gefid             << .gefid.default(0.0)
	l_detached_record.distance          << .distance.default(0.0)
	_if .sector _isnt _unset _then
		_dynamic !current_coordinate_system!
		_local l_sector <<
			_if !current_coordinate_system! _isnt _unset _then
				_local l_transform << transform.new_converting_cs_to_cs(
						coordinate_system.new_proj_long_lat(:wgs84,:degree),
						!current_coordinate_system!)
				>> .sector.transform(l_transform)
			_else
				>> .sector
			_endif
		!current_coordinate_system! << _unset
		l_detached_record.make_geometry(:route,l_sector)
	_endif
	>> p_collection.insert(l_detached_record)
_endmethod
$
