#% text_encoding = iso8859_1
_package sw
##
##> Name:         ghc_ggs_mixin.magik
##
##> Application:  waste_water
##
##> Description:  Calculation of groundwater impact for waste
##                water objects.
##
##> Author:       Wolfgang Klink
##
##> Date:         09. Nov 2009
##
## Copyright (C)  GIT HydroS Consult GmbH.
##                Freiburg, Germany.
##                http://www.hydrosconsult.de
##                All Rights Reserved.

_pragma(classify_level=restricted)
##
## Mixin   : ghc_ggs_mixin
##
def_mixin(:ghc_ggs_mixin,{:ghc_ggs_sgs_base_mixin})
$

#> Methods

_pragma(classify_level=restricted)
_method ghc_ggs_mixin.ghc_calculate_static_groundwater_impact(p_plugin)
	##
	## Start the calculation of groundwater impact
	## when called from editor.

	_dynamic !current_application!

	l_view << _self.source_view

	# Check if view is writable:
	_if l_view.mode <> :write
	_then
		!current_application!.show_alert(_self.ghc_ggs!message(:ds_view_readonly, _unset,
								   l_view.external_name))
		_return
	_endif

	result << _self.ghc_do_calculate_groundwater_impact()

	_if result _isnt _unset
	_then
		p_plugin.application.show_alert(_self.ghc_ggs!message(result))
	_endif

_endmethod
$

## Method ghc_do_calculate_groundwater_impact()
_method ghc_ggs_mixin.ghc_do_calculate_groundwater_impact()
	##
	## Calculate value of the fields "Lage im Grundwasser",
	## "Abstand zum Grundwasser" and "Zeit im Grundwasser".

	_dynamic !current_application!

	l_view << _self.source_view
	l_view_name << l_view.external_name
	# Check if view is writable:
	_if l_view.mode <> :write
	_then
		_self.ghc_show_information(:ds_view_readonly, _unset,
								   l_view_name)
		_return
	_endif

	# Get the top and bottom rastersnames from plugin
	l_plugin << !current_application!.plugin(:ghc_ggs)
	_if l_plugin _is _unset
	_then
		_return :configuration_fault
	_endif

	# Get the top and bottom groundwater situation:
	(l_top_gw_situation, l_median_gw_situation, l_bottom_gw_situation) <<
		_self.ghc_get_groundwater_situations(l_plugin)

	_if l_top_gw_situation _is _unset _orif
	    l_median_gw_situation _is _unset _orif
	    l_bottom_gw_situation _is _unset
	_then

		_return :configuration_fault
	_endif
	# get the geometry:
	l_geometry << _self.perform(_self.ghc_ggs_sgs_geometry_field)
	_if l_geometry _is _unset
	_then
		_self.ghc_show_information(:no_ggs_sgs_geometry_found)
		_return :no_ggs_sgs_geometry_found
	_endif

	# Get the height and coordinate of lowest point of this object:
	(l_coord, l_height, l_coord_message) << _self.ghc_get_height_and_coord(_self )
	_if l_coord _is _unset
	_then
		_return :no_height_information_found
	_endif

	# Get the bottom groundwater-value from raster:
	l_bottom_gw_value << _self.ghc_get_value_from_raster(l_bottom_gw_situation, l_coord)

	# Get the top groundwater-value from raster:
	l_top_gw_value << _self.ghc_get_value_from_raster(l_top_gw_situation, l_coord)

	# Set field "Lage im Grundwasser":
	_if _self.has_field?(:ghc_grundwasserlage)
	_then
		l_gw_field_name << :ghc_grundwasserlage
	_elif _self.has_field?(:grundwasserlage)
	_then
		l_gw_field_name << :grundwasserlage
	_endif
	_if l_bottom_gw_value _is _unset _orif
	    l_top_gw_value _is _unset
	_then
		condition.raise(:information,
				:info_type,
				_self.ghc_ggs!message(:no_groundwater_value_in_area),
				:object,
				_self
			  )
		_return

	_endif
	_if l_gw_field_name _isnt _unset
	_then
		# Set the field "Lage im Grundwasser":
		l_gw_value << _self.ghc_get_grundwasserlage(l_top_gw_value, l_bottom_gw_value, l_height)

		_if (l_old_gw_value << _self.perform(l_gw_field_name)) = l_gw_value
		_then

		_else

			_self.perform(l_gw_field_name.with_chevron, l_gw_value)
			_if l_old_gw_value _is _unset
			_then
				condition.raise(:information,
						:info_type,
						_self.ghc_ggs!message(:groundwater_state_added),
						:object,
						_self
					  )
			_else
				condition.raise(:information,
						:info_type,
						_self.ghc_ggs!message(:groundwater_state_changed),
						:object,
						_self,
						:pm_object_text_info,
						_self.ghc_ggs!message(:groundwater_state_changed_detail,
								  _unset,
								  l_gw_value,
								  l_old_gw_value
						      )
					  )
			_endif
		_endif

		_if l_gw_value = _self.ghc_grundwasserlage_fields[:not_in_groundwater]
		_then
			_self.ghc_set_time_in_gw(0)
		_elif l_gw_value = _self.ghc_grundwasserlage_fields[:sometimes_in_groundwater]
		_then
			# Calculate the Time in GW

			_if l_plugin.ggs_calculate_time_in_gw?() _isnt _unset _andif
			    l_plugin.ggs_calculate_time_in_gw?() = _true
			_then
				_self.ghc_calculate_time_in_gw(l_coord, l_height, l_plugin)
			_endif
		_else
			# "Im Grundwasser":
			_self.ghc_set_time_in_gw(100)

			#_self.ghc_set_distance_to_gw(0)
			_endif

		# Calculate distance to top groundwater level:
		_if l_median_gw_situation _isnt _unset
		_then
			_self.ghc_calculate_distance_to_mean_gw(l_coord, l_height, l_median_gw_situation)
			#_self.ghc_calculate_distance_to_gw(l_coord, l_height, l_median_gw_situation)
		_endif

		_self.ghc_calculate_distance_to_max_gw(l_coord, l_height, l_top_gw_situation)
		_self.ghc_calculate_distance_to_min_gw(l_coord, l_height, l_bottom_gw_situation)
	_else
		# No field grundwasserlage:
		_self.ghc_show_information(:missing_field_grundwasserlage)
		_return :missing_field_grundwasserlage
	_endif

	_return l_coord_message

_endmethod
$

## Method ghc_get_grundwasserlage()
_method ghc_ggs_mixin.ghc_get_grundwasserlage(p_top_gw_value, p_bottom_gw_value, p_height)
	##
	## Get the value for field Lage im Grundwasser.
	## p_top_gw_value and p_bottom_gw_value are the highest and the
	## lowest groundwater-levels, p_height is the height of the
	## object,

	_if p_top_gw_value < p_height
	_then
		# Never in groundwater
		l_grundwasserlage << _self.ghc_grundwasserlage_fields[:not_in_groundwater]
	_endif

	_if p_top_gw_value > p_height
	_then
		_if p_bottom_gw_value > p_height
		_then
			# Always in groundwater
			l_grundwasserlage << _self.ghc_grundwasserlage_fields[:in_groundwater]
		_else
			# Sometimes in groundwater
			l_grundwasserlage << _self.ghc_grundwasserlage_fields[:sometimes_in_groundwater]
		_endif
	_endif

	_return l_grundwasserlage

_endmethod
$

## Method ghc_calculate_time_in_gw()
_method ghc_ggs_mixin.ghc_calculate_time_in_gw(p_coord, p_height, p_plugin)
	##
	## Calculate the percentage of time in groundwater for
	## coordinate p_coord and height p_height interpolating between
	## the next higher and lower groundwater situations.

	_if _not _self.has_field?(:ghc_time_in_gw)
	_then
		_return
	_endif

	_local l_next_up_ggs, l_next_up_distance, l_next_up_value
	_local l_next_down_ggs, l_next_down_distance, l_next_down_value

	l_view << p_plugin.get_ggs_view()
	l_gw_situation_col << l_view.collections[:ghc_ggs_groundwater_situation]

	# Find the next higher and next lower groundwater situation:
	_for i_gw_situation _over l_gw_situation_col.fast_elements()
	_loop
		_if i_gw_situation.undershooting_percentil _is _unset
		_then
			# No percent value
			_continue
		_endif
		l_raster_value <<  _self.ghc_get_value_from_raster(i_gw_situation, p_coord)

		# Calculate the distance between the groundwater situation and
		# the object:
		l_distance << l_raster_value - p_height

		_if l_distance > 0
		_then
			# groundwater level of the gw-situation is higher:
			_if l_next_up_ggs _is _unset
			_then
				l_next_up_ggs << i_gw_situation
				l_next_up_distance << l_distance
				l_next_up_value << l_raster_value
			_else
				_if l_distance.abs < l_next_up_distance.abs
				_then
					l_next_up_ggs << i_gw_situation
					l_next_up_distance << l_distance
					l_next_up_value << l_raster_value
				_endif
			_endif
		_elif l_distance < 0
		_then
			# groundwater level of the gw-situation is lower:
			_if l_next_down_ggs _is _unset
			_then
				l_next_down_ggs << i_gw_situation
				l_next_down_distance << l_distance
				l_next_down_value << l_raster_value
			_else
				_if l_distance.abs < l_next_down_distance.abs
				_then
					l_next_down_ggs << i_gw_situation
					l_next_down_distance << l_distance
					l_next_down_value << l_raster_value
				_endif
			_endif
		_else
			# exactly the same value:
			_self.ghc_set_time_in_gw(100 - i_gw_situation.undershooting_percentil)
			_return
		_endif
	_endloop

	_if l_next_down_ggs _is _unset _orif
	    l_next_up_ggs _is _unset
	_then
		_self.ghc_show_information(:ghc_calculate_time_in_gw_error)
		_return
	_endif

	# Calculate result percentile with linear interpolation between
	# the two next groundwater situation rasters:
	l_upper_percentile << l_next_up_ggs.undershooting_percentil
	l_percentile_below << l_next_down_ggs.undershooting_percentil
	l_percentile_value_dist << l_next_up_distance.abs + l_next_down_distance.abs
	l_percentile_dist << l_upper_percentile - l_percentile_below
	l_result_percentile_value << l_percentile_below + l_percentile_dist *
							  (p_height- l_next_down_value) / l_percentile_value_dist

	_self.ghc_set_time_in_gw(100 - l_result_percentile_value)

_endmethod
$

## Method ghc_set_time_in_gw()
_pragma(classify_level=restricted)
_method ghc_ggs_mixin.ghc_set_time_in_gw(p_value)
	##
	## set the value in field ghc_time_in_gw if existing

	_if _self.has_field?(:ghc_time_in_gw)
	_then

		l_field_name << :ghc_time_in_gw
	_else
		_return
	_endif
	l_old_value << _self.perform(l_field_name)
	_if l_old_value _isnt _unset _andif
	    l_old_value.value = p_value
	_then
		_return
	_endif

	_self.perform(l_field_name.with_chevron, p_value)

	_if l_old_value _is _unset
	_then
		condition.raise(:information,
				:info_type,
				_self.ghc_ggs!message(:time_in_groundwater_added),
				:object,
				_self
			  )
	_else
		condition.raise(:information,
				:info_type,
				_self.ghc_ggs!message(:time_in_groundwater_changed),
				:object,
				_self,
				:pm_object_text_info,
				_self.ghc_ggs!message(:time_in_groundwater_changed_detail,
						  _unset,
						  p_value,
						  l_old_value.value
				      )
			  )
	_endif

_endmethod
$

## Method ghc_set_distance_to_gw()
_pragma(classify_level=restricted)
_method ghc_ggs_mixin.ghc_set_distance_to_gw(p_value)
	##
	## set the valuein field ghc_distance_to_gw if existing.

	_if _self.has_field?(:ghc_distance_to_gw)
	_then
		_self.ghc_distance_to_gw << p_value
	_endif

_endmethod
$

## Method ghc_get_groundwater_situations()
_pragma(classify_level=restricted)
_method ghc_ggs_mixin.ghc_get_groundwater_situations(p_plugin)
	##
	## Get the top, bottom and median groundwater situation objects.

	l_view << p_plugin.get_ggs_view()
	l_gw_situation_col << l_view.collections[:ghc_ggs_groundwater_situation]

	# top raster:
	l_top_gw_situation_name << p_plugin.get_ggs_top_groundwater_situation_name()
	l_predicate_top << predicate.eq(:name, l_top_gw_situation_name)
	l_top_gw_situation << l_gw_situation_col.select(l_predicate_top).an_element()

	# median raster:
	l_median_gw_situation_name << p_plugin.get_ggs_median_groundwater_situation_name()
	_if l_median_gw_situation_name _isnt _unset
	_then
		l_predicate_median << predicate.eq(:name, l_median_gw_situation_name)
		l_median_gw_situation << l_gw_situation_col.select(l_predicate_median).an_element()
	_endif

	# bottom raster:
	l_bottom_gw_situation_name << p_plugin.get_ggs_bottom_groundwater_situation_name()
	l_predicate_bottom << predicate.eq(:name, l_bottom_gw_situation_name)
	l_bottom_gw_situation << l_gw_situation_col.select(l_predicate_bottom).an_element()

	_return l_top_gw_situation, l_median_gw_situation, l_bottom_gw_situation

_endmethod
$

