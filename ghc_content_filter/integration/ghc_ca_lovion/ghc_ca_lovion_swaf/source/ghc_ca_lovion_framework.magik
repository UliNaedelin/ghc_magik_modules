#% text_encoding = iso8859_1
_package sw
##
##> Name:         ghc_ca_lovion_framework.magik
##
##> Author:       GIT HydroS Consult GmbH
##
##> Date:         14. Sep 2014
##
## Copyright (C)  GIT HydroS Consult GmbH.
##                Freiburg, Germany.
##                http://www.hydrosconsult.de
##                All Rights Reserved.
##
#remex(:ghc_ca_lovion_framework)
#$
_pragma(classify_level=restricted)
##
def_slotted_exemplar(:ghc_ca_lovion_framework,
        {
	
	},
	{:ghc_ok_cancel_framework})
$

_pragma(classify_level=restricted)
_method ghc_ca_lovion_framework.init_actions()
	##
	_self.add_action(sw_action.new(:refresh,
				       :caption, _self.message(:refresh),
				       :engine, _self,
				       :value, _false,
				       :image, {:refresh, _self.module_name},
				       :action_message, :refresh|()|)
	      )
	_self.add_action(sw_action.new(:only_connected,
				       :caption, _self.message(:only_connected),
				       :engine, _self,
				       :value, _false,
				       :toolbar_control, :image_toggle_item,
				       :image, {:only_connected, _self.module_name},
				       :value_change_message, :only_connected_changed|()|))
	_self.add_action(sw_action.new(:vm_module,
				       :caption, _self.message(:vm_module),
				       :engine, _self,
				       :toolbar_control, {:text_choice_item},
				       :items, _self.vm_module_vec(),
				       :value_change_message, :vm_module_changed|()|))

	_self.add_action(sw_action.new(:vm_view_configuration,
				       :caption, _self.message(:vm_view_configuration),
				       :engine, _self,
				       :toolbar_control, {:text_choice_item},
				       :text_representation_message, :name,
				       :items, _self.vm_view_configuration_vec(),
				       :value_change_message, :vm_view_configuration_changed|()|))
	_self.add_action(sw_action.new(:filter_view_configuration,
				       :toolbar_control, :image_toggle_item,
				       :caption, _self.message(:filter_view_configuration),
				       :engine, _self,
				       :image, {:filter_view_configuration, _self.module_name},
				       :value, _false,
				       :value_change_message, :filter_view_configuration_changed|()|))
	
	
	_self.add_action(sw_action.new(:connect,
				       :caption, _self.message(:connect),
				       :engine, _self,
				       :image, {:connect, _self.module_name},
				       :action_message, :connect|()|))

	_self.add_action(sw_action.new(:disconnect,
				       :caption, _self.message(:disconnect),
				       :engine, _self,
				       :image, {:disconnect, _self.module_name},
				       :action_message, :disconnect|()|))
	
	_self.add_action(sw_action.new(:exit,
				       :caption, _self.message(:exit),
				       :engine, _self,
				       :action_message, :exit|()|))
	_self.add_action(sw_action.new(:help,
				       :caption, _self.message(:help),
				       :engine, _self,
				       :image, {:help, _self.module_name},
				       :action_message, :help|()|))
_endmethod
$

_pragma(classify_level=restricted)
_method ghc_ca_lovion_framework.exit()
	##
	_self.suspend()
_endmethod
$

_pragma(classify_level=restricted)
_method ghc_ca_lovion_framework.help()
	##
	_self.show_alert("Help not yet availabe")
_endmethod
$

_method ghc_ca_lovion_framework.post_build_gui()
	##
	_super.post_build_gui()
	_self.top_frame.icon << smallworld_product.get_raster_image(:title_image,
								    _self.module_name,
								    _true
						   )
	_self.top_frame.title << _self.message(:title)
_endmethod
$


_pragma(classify_level=restricted)
_method ghc_ca_lovion_framework.post_activation()
	## 
	## 
	_super.post_activation()
	_self.manage_actions()

_endmethod
$

_pragma(classify_level=restricted)
_method ghc_ca_lovion_framework.set_title(p_title_name)
	##
	_if _self.top_frame _isnt _unset
	_then
		_self.top_frame.title << p_title_name
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method ghc_ca_lovion_framework.ok(_optional p_keep_open?)
_endmethod
$

_pragma(classify_level=restricted)
_method ghc_ca_lovion_framework.manage_actions()
	## 
	## 
	l_dt << _self.tree_plugin().current_selection()
	_if l_dt _is _unset _orif
	    l_dt.value[:type] ~= :layer
	_then
		_self.action(:connect).enabled? << _false
		_self.action(:disconnect).enabled? << _false
	_else
		_self.action(:disconnect).enabled? << l_dt.value[:mapping] _isnt _unset
		_self.action(:connect).enabled? << _self.action(:vm_view_configuration).value _isnt _unset
	_endif
	
_endmethod
$


_pragma(classify_level=restricted)
_method ghc_ca_lovion_framework.vm_plugin()
	## 
	## 
	_return _self.application.plugin(:ghc_view_manager)
_endmethod
$

_pragma(classify_level=restricted)
_method ghc_ca_lovion_framework.vm_module_vec()
	## 
	## 
	_if (l_plugin << _self.vm_plugin()) _is _unset
	_then
		_return rope.new()
	_endif
	_return l_plugin.get_restrict_module_vec()
_endmethod
$

_pragma(classify_level=restricted)
_method ghc_ca_lovion_framework.vm_view_configuration_vec()
	## 
	## 
	_if (l_plugin << _self.vm_plugin()) _is _unset
	_then
		_return rope.new()
	_endif
	_return l_plugin.get_view_configuration_vec_for(_self.action(:vm_module).value, :all, _unset)
_endmethod
$


_pragma(classify_level=restricted)
_method ghc_ca_lovion_framework.refresh()
	## 
	## 
	_self.action(:vm_module).items << _self.vm_module_vec()
	_self.action(:vm_view_configuration).items << _self.vm_view_configuration_vec()
	_self.tree_plugin().refresh()
_endmethod
$

_pragma(classify_level=restricted)
_method ghc_ca_lovion_framework.only_connected_changed()
	## 
	## 
	_self.tree_plugin().refresh()
_endmethod
$

_pragma(classify_level=restricted)
_method ghc_ca_lovion_framework.vm_module_changed()
	## 
	##
	_self.action(:vm_view_configuration).items << _self.vm_view_configuration_vec()
	
_endmethod
$

_pragma(classify_level=restricted)
_method ghc_ca_lovion_framework.vm_view_configuration_changed()
	## 
	##
	_if _self.action(:filter_view_configuration).value _is _true
	_then
		_self.tree_plugin().refresh_colour()
	_endif
		
_endmethod
$
_pragma(classify_level=restricted)
_method ghc_ca_lovion_framework.filter_view_configuration_changed()
	## 
	## 
	_self.tree_plugin().refresh_colour()
_endmethod
$

_pragma(classify_level=restricted)
_method ghc_ca_lovion_framework.connect()
	## 
	## 
	l_dt << _self.tree_plugin().current_selection()
	
	l_layer_name << l_dt.value[:record].name
	l_project_name << l_dt.value[:record].repository.project.name
	l_view << _self.get_view()
	l_mapping << l_view.collections[:ghc_ca_lovion_mapping].select(predicate.eq(:lovion_project,
										    l_project_name) _and 
								       predicate.eq(:lovion_layer,
										    l_layer_name)).an_element()
	l_mode <<_self.framework.request_write_access_with_alert()
	
	_if _not _self.framework.ghc!view_with_write_access?(_self.get_view())
	_then
		_return
	_endif
	_if l_mapping _isnt _unset
	_then
		_if l_mapping.view_configuration_id = _self.action(:vm_view_configuration).value.id
		_then
			_return
		_endif
	
		record_transaction.new_update(l_mapping,
					      property_list.new_with(:view_configuration_id, _self.action(:vm_view_configuration).value.id)).run()
	_else
		record_transaction.new_insert(l_view.collections[:ghc_ca_lovion_mapping],
					      property_list.new_with(
						      :view_configuration_id, _self.action(:vm_view_configuration).value.id,
						      :lovion_layer, l_layer_name,
						      :lovion_project, l_project_name
							    )).run()
		

	_endif
	_self.framework.request_completed(l_mode, _false )
	_self.reset_ca_mapping_cache()
	_self.tree_plugin().refresh()
_endmethod
$

_pragma(classify_level=restricted)
_method ghc_ca_lovion_framework.view_configuration_for(p_ca_lovion_mapping)
	## 
	## 
	l_view << _self.vm_plugin().get_vm_view()
	_return l_view.collections[:ghc_vm_view_configuration].at(p_ca_lovion_mapping.view_configuration_id)
_endmethod
$


_pragma(classify_level=restricted)
_method ghc_ca_lovion_framework.disconnect()
	## 
	## 
	l_dt << _self.tree_plugin().current_selection()

	l_mapping << l_dt.value[:mapping]
	_if l_mapping _isnt _unset
	_then
		l_mode <<_self.framework.request_write_access_with_alert()
	
		_if _not _self.framework.ghc!view_with_write_access?(_self.get_view())
		_then
			_return
		_endif
		record_transaction.new_delete(l_mapping).run()
		_self.framework.request_completed(l_mode, _false )
		_self.reset_ca_mapping_cache()
		_self.tree_plugin().refresh()
	_endif
	
_endmethod
$

_pragma(classify_level=restricted)
_method ghc_ca_lovion_framework.reset_ca_mapping_cache()
	## 
	## 
	_if (l_layer_regular << !current_package![:it_lsc_layer_regular]) _isnt _unset _andif
	    l_layer_regular.responds_to?(:ca_mapping_cache_prop)
	_then
		l_layer_regular.ca_mapping_cache_prop.empty()
	_endif 
_endmethod
$



_pragma(classify_level=restricted)
_method ghc_ca_lovion_framework.tree_plugin()
	## 
	## 
	_return _self.plugin(:ghc_ca_lovion_tree)
_endmethod
$

_pragma(classify_level=restricted)
_method ghc_ca_lovion_framework.get_view()
	## 
	## 
	_return _self.framework.get_view()
_endmethod
$
